/// Expect:
/// - output: "4821\n"

import reader
import utility

struct PacketOrValue {
    packet: [PacketOrValue]
    value: i32?
}

fn main() {
    let input = reader::read_input(day: 13, examples: false)

    mut pairs: [String] = []
    mut count = 1
    mut total = 0
    for line in utility::split(input) {
        if line.is_empty() {
            mut (remaining_a, packet_a) = parse_packet(packet: pairs[0])
            mut (remaining_b, packet_b) = parse_packet(packet: pairs[1])

            let in_order = check_order(packet_a, packet_b)

            if in_order == 1 {
                total += count
            }
            
            pairs = []

            count++
        } else {
            pairs.push(line)
        }
    }

    println("{}", total)
}

fn check_order(anon mut packet_a: PacketOrValue, anon mut packet_b: PacketOrValue) throws -> u8 {
    if packet_a.value.has_value() and packet_b.value.has_value() {
        if packet_a.value! < packet_b.value! {
            return 1
        } else if packet_a.value! == packet_b.value! {
            return 2
        } else {
            return 3
        }
    } else if not packet_a.value.has_value() and packet_b.value.has_value() {
        packet_b = PacketOrValue(
            packet: [PacketOrValue(
                packet: []
                value: packet_b.value!
            )]
            value: None
        )
    } else if not packet_b.value.has_value() and packet_a.value.has_value() {
        packet_a = PacketOrValue(
            packet: [PacketOrValue(
                packet: []
                value: packet_a.value!
            )]
            value: None
        )
    }

    mut length_a = packet_a.packet.size()
    mut length_b = packet_b.packet.size()

    mut max = length_a
    if length_b > max {
        max = length_b
    }

    for i in 0..max {
        if i < length_a and i < length_b {
            let order = check_order(packet_a.packet[i], packet_b.packet[i])
            if order != 2 {
                return order
            }
        } else if i < length_a {
            return 3 // not in order
        } else {
            return 1 // in order
        }
    }

    return 2
}

fn parse_packet(mut packet: String) throws -> (String, PacketOrValue) {
    mut values = PacketOrValue(
        packet: []
        value: None
    )

    mut current_value = StringBuilder::create()
    mut i = 0uz
    while i < packet.length() {
        if packet.byte_at(i) == b'[' {
            let (new_packet, value) = parse_packet(packet: packet.substring(start: i+1, length: packet.length()-i-1))
            values.packet.push(value)
            packet = new_packet
            i = 0
        } else if packet.byte_at(i) == b']' or packet.byte_at(i) == b',' {
            if current_value.length() > 0 {
                values.packet.push(PacketOrValue(
                    packet: []
                    value: current_value.to_string().to_int()!
                ))

                current_value.clear()
            }

            if packet.byte_at(i) == b']' {
                packet = packet.substring(start: i+1, length: packet.length()-i-1)
                break
            }

            i++
        } else if packet.byte_at(i) >= b'0' and packet.byte_at(i) <= b'9' {
            current_value.append(packet.byte_at(i))
            i++
        }
    }

    return (packet, values)
}
