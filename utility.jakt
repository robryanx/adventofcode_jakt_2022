/// Expect: Skip

fn string_to_char_array(anon str: String) throws -> [u8] {
    mut chars: [u8] = []
    for i in ..str.length() {
        chars.push(str.byte_at(i))
    }

    return chars
}

fn char_array_to_string(anon char_arr: [u8]) throws -> String {
    mut sb = StringBuilder:: create()

    for i in ..char_arr.size() {
        sb.append(char_arr[i])
    }

    return sb.to_string()
}

fn sort<T>(mut values: [T], sorter: &fn(anon item_a: &T, anon item_b: &T) -> i8, low: i32 = 0, mut high: i32 = -1i32) {
    if high == -1i32 {
        high = values.size() as! i32 - 1
    }

    if low < high {
        let pivot = values[high]
        mut pi: i32 = low - 1

        for j in low..high {
            if sorter(&values[j], &pivot) <= 0 {
                pi++

                let tmp = values[j]
                values[j] = values[pi]
                values[pi] = tmp
            }
        }

        pi++
        if pi != high {
            let tmp = values[high]
            values[high] = values[pi]
            values[pi] = tmp
        }

        sort(values, sorter, low, high: pi - 1)
        sort(values, sorter, low: pi+1, high)
    }
}

fn array_remove(arr: [String], remove_str: String) throws -> [String] {
    mut new_array: [String] = []

    for str_ in arr.iterator() {
        if str_ != remove_str {
            new_array.push(str_)
        }
    }

    return new_array
}

fn array_join<T>(arr: [T]) throws -> String {
    mut sb = StringBuilder::create()

    for item in arr {
        sb.append_string(format("{}", item))
    }
    
    return sb.to_string()
}

fn abs(anon number: i64) -> i64 {
    if number < 0 {
        return number * -1
    }

    return number
}

fn abs32(anon number: i32) -> i32 {
    if number < 0 {
        return number * -1i32
    }

    return number
}

fn into_set(anon x: &ArraySlice<u8>) throws -> {u8} {
    mut set: {u8} = {}
    for a in *x {
        set.add(a)
    }

    return set
}

fn intersect_sets<T>(anon a: Set<T>, anon b: Set<T>) throws -> {T} {
    mut intersect: {u8} = {}

    for x in a {
        if b.contains(x) {
            intersect.add(x)
        }
    }

    return intersect
}

fn split(input: String, separator: c_char = c'\n') throws -> [String] {
    mut results: [String] = []

    mut builder = StringBuilder::create()

    for i in 0..input.length() {
        if input.byte_at(i) == separator as! u8 {
            results.push(builder.to_string())
            builder.clear()
        } else {
            builder.append(input.byte_at(i))
        }
    }

    results.push(builder.to_string())
    return results
}

fn split_on_string(input: String, separator: String) throws -> [String] {
    mut results: [String] = []

    mut builder = StringBuilder::create()

    mut i = 0uz
    while i < input.length() {
        mut is_separator = false
        if i + separator.length() < input.length() {
            is_separator = true
            for j in 0..separator.length() {
                if input.byte_at(i+j) != separator.byte_at(j) {
                    is_separator = false
                    break
                }
            }
        }

        if is_separator {
            results.push(builder.to_string())
            builder.clear()
            i += separator.length()
        } else {
            builder.append(input.byte_at(i))
            i++
        }
    }

    results.push(builder.to_string())
    return results
}

fn trim(anon input: String) throws -> String {
    mut start = 0uz
    for i in 0..input.length() {
        if input.byte_at(i) != b' ' {
            break
        }

        start++
    }

    mut end = input.length()
    for i in (input.length()-1)..0 {
        if input.byte_at(i) != b' ' {
            break
        }

        end--
        if end == 0 {
            break
        }
    }

    if end <= start {
        return ""
    }

    return input.substring(start, length: end-start)
}

fn list(anon input: String) throws -> [String] {
    mut parts = input.split(c',')

    for i in 0..parts.size() {
        parts[i] = trim(parts[i])
    }

    return parts
}

fn is_number_part(anon c: u8) -> bool => (c >= b'0' and c <= b'9') or c == b'-'

fn format_match(mut line: String, mut format: String) throws -> [i32]? {
    line = line.replace(replace: " ", with: "")
    format = format.replace(replace: " ", with: "")

    mut numbers: [i32] = []
    mut current_number = StringBuilder::create()
    mut line_pos = 0uz
    for i in ..format.length() {
        if format.byte_at(i) == b'%' {
            while(line_pos < line.length() and is_number_part(line.byte_at(line_pos))) {
                current_number.append(line.byte_at(line_pos))

                line_pos++
            }

            let candidate = current_number.to_string()
            if candidate.length() > 0 {
                let to_int = candidate.to_int()
                if to_int.has_value() {
                    numbers.push(to_int!)
                    current_number.clear()
                } else {
                    return None
                }
            } else {
                return None
            }
        } else {
            line_pos++
        }
    }

    return numbers
}

struct Enumerator<T> {
    index: usize
    iterator: ArrayIterator<T>

    fn next(mut this) -> (usize, T)? {
        .index++

        let item: T? = .iterator.next()
        if item.has_value() {
            let ret: (usize, T) = (.index - 1, item!)
            return Some(ret)
        } else {
            return None
        }
    }
}

fn enumerate<T>(anon iterator: ArrayIterator<T>) -> Enumerator<T> {
    return Enumerator(
        index: 0
        iterator
    )
}

fn print_grid(grid: [[u8]]) {
    for y in ..grid.size() {
        for x in ..grid[y].size() {
            print("{}", grid[y][x] as! c_char)
        }
        println("")
    }
}

struct BoundingBox {
    smallest_y: usize,
    largest_y: usize,
    smallest_x: usize,
    largest_x: usize
}

fn grid_bounding_box(grid: &[[u8]]) throws -> BoundingBox {
    mut smallest_y = grid.size()
    mut largest_y = 0uz

    mut smallest_x = grid[0].size()
    mut largest_x = 0uz

    for y in ..grid.size() {
        for x in ..grid[0].size() {
            if grid[y][x] == c'#' as! u8 {
                if y > largest_y {
                    largest_y = y
                }
                if y < smallest_y {
                    smallest_y = y
                }
                if x > largest_x {
                    largest_x = x
                }
                if x < smallest_x {
                    smallest_x = x
                }
            }
        }
    }

    return BoundingBox(
        smallest_y
        largest_y
        smallest_x
        largest_x
    )
}

fn print_grid_with_bounding(grid: [[u8]], box: BoundingBox) {
    for y in (box.smallest_y..box.largest_y).inclusive() {
        for x in (box.smallest_x..box.largest_x).inclusive() {
            print("{}", grid[y][x] as! c_char)
        }
        println("")
    }
}

fn extend_grid(grid: &[[u8]]) throws -> [[u8]] {
    let height = grid.size()
    let width = grid[0].size()

    let new_height = height * 3
    let new_width = width * 3

    mut new_grid: [[u8]] = []
    for y in ..new_height {
        mut new_row: [u8] = [46;new_width]
        if y >= height and y < height * 2 {
            for x in ..new_width {
                if x >= width and x < width * 2 {
                    new_row[x] = grid[y-height][x-width]
                }
            }
        }
        new_grid.push(new_row)
    }

    return new_grid
}
