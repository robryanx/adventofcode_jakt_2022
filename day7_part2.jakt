/// Expect:
/// - output: "1300850\n"

import reader
import utility
import path { Path }

struct FileContainer {
    name: String,
    size: i32
}

class Directory {
    public name: String
    public directories: [Directory]
    public files: [FileContainer]
    public size: i32
}

function main() {
    mut directory_hash: [String:Directory] = [:]

    mut current_directory: Directory? = None
    mut current_path = Path::from_string("")
    for output_line in reader::lines_string(day: 7) {
        if output_line.byte_at(0) == b'$' {
            let command_parts = output_line.split(' ')
            if command_parts[1] == "cd" {
                if not current_directory.has_value() {
                    current_directory = Directory(
                        name: "/"
                        directories: []
                        files: []
                        size: 0
                    )

                    current_path = current_path.join("/")
                    directory_hash["/"] = current_directory!
                } else if command_parts[2] == ".." {
                    current_path = current_path.parent()
                    current_directory = get_directory(directory_hash, find: current_path.to_string())
                } else {
                    for directory in current_directory!.directories {
                        if directory.name == command_parts[2] {
                            current_directory = directory
                            current_path = current_path.join(directory.name)
                        }
                    }
                }
            }
        } else if current_directory.has_value() {
            let listing_parts = output_line.split(' ')
            if listing_parts[0] == "dir" {
                mut new_directory = Directory(
                    name: listing_parts[1]
                    directories: []
                    files: [],
                    size: 0
                )

                current_directory!.directories.push(new_directory)
                let path = current_path.join(listing_parts[1])
                directory_hash[path.to_string()] = new_directory
            } else {
                let new_file = FileContainer(
                    name: listing_parts[1]
                    size: listing_parts[0].to_int()!
                )

                current_directory!.files.push(new_file)
                current_directory!.size += new_file.size

                if current_directory!.name != "/" {
                    mut parent = current_path.parent()

                    while true {
                        mut dir = get_directory(directory_hash, find: parent.to_string())
                        if dir.has_value() {
                            dir!.size += new_file.size
                            if parent.to_string() == "/" {
                                break
                            }

                            parent = parent.parent()
                        } else {
                            break
                        }
                    }
                }
                
            }
        }
    }

    let total_space = 70000000i32
    let needed_space = 30000000i32

    mut closest = 999999999i32
    mut closest_size = 0i32
    mut total_used = get_directory(directory_hash, find: "/")!.size
    mut extra_needed = needed_space - (total_space - total_used)

    for (key, val) in directory_hash {
        if val.size > extra_needed {
            let gap = val.size - extra_needed
            if gap < closest {
                closest = gap
                closest_size = val.size
            }
        }
    }

    println("{}", closest_size)
}

function get_directory(directory_hash: [String:Directory], find: String) -> Directory? {
    for (key, val) in directory_hash {
        if key == find {
            return val
        }
    }

    return None
} 
