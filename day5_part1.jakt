/// Expect:
/// - output: "ZBDRNPMVH\n"

import reader
import utility

enum ParseMode {
    Stacks
    Instructions
}

function main() {
    let input = reader::read_input(day: 5, examples: false)

    mut parse_mode = ParseMode::Stacks

    mut stacks: [[u8]] = []
    mut action = 1

    for line in utility::split(input) {
        if line == "" {
            parse_mode = ParseMode::Instructions

            stacks = reverse(stacks)

            continue
        }

        if parse_mode is Stacks {
            mut current_pos = 0uz
            mut stack = 0uz

            if stacks.size() == 0 {
                while current_pos < line.length() {
                    stack++
                    current_pos += 4
                }

                for i in 0..stack {
                    mut arr: [u8] = []

                    stacks.push(arr)
                }

                current_pos = 0
                stack = 0uz
            }

            while current_pos < line.length() {
                let byte = line.substring(start: current_pos+1, length: 1).byte_at(0)
                if byte != b' ' and not (byte >= b'1' and byte <= b'9') {
                    stacks[stack].push(byte)
                }

                stack++
                current_pos += 4
            }
        } else {
            let instruction_parts = parse_move_instruction(line)

            stacks = move(stacks, number: instruction_parts[0], from_stack: instruction_parts[1], to_stack: instruction_parts[2])
            action++
        }
    }

    print_result(stacks)
}

function parse_move_instruction(line: String) throws -> [i32] {
    let instruction_parts = line.split(' ')

    return [instruction_parts[1].to_int()!, instruction_parts[3].to_int()!, instruction_parts[5].to_int()!]
}

function print_result(stacks: [[u8]]) {
    for i in 0..stacks.size() {
        let last = stacks[i].last()

        if last.has_value() {
            print("{}", last! as! c_char)
        }
    }

    println("")
}

function reverse(mut stacks: [[u8]]) throws -> [[u8]] {
    for i in 0..stacks.size() {
        mut new_stack: [u8] = []
        while stacks[i].size() > 0 {
            new_stack.push(stacks[i].pop()!)
        }
        stacks[i] = new_stack
    }

    return stacks
}

function move(mut stacks: [[u8]], number: i32, from_stack: i32, to_stack: i32) throws -> [[u8]] {
    for i in 0..number {
        if stacks[from_stack-1].size() > 0 {
            stacks[to_stack-1].push(stacks[from_stack-1].pop()!)
        }
    }

    return stacks
}
