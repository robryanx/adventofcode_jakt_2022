/// Expect:
/// - output: "4737567\n"

import reader
import utility

struct Position {
    x: i32
    y: i32
}

fn main() {
    mut min_x = 0i32
    mut max_x = 0i32

    let y = 2000000i32
    mut beacon_x: [i32:bool] = [:]

    for line in reader::lines_string(day: 15, examples: false) {
        let locations = utility::format_match(line, format: "Sensor at x=%, y=%: closest beacon is at x=%, y=%")

        let sensor_position = Position(
            x: locations![0]
            y: locations![1]
        )

        let beacon_position = Position(
            x: locations![2]
            y: locations![3]
        )

        if beacon_position.y == y {
            beacon_x[beacon_position.x] = true
        }

        let distance = manhattan(position_a: sensor_position, position_b: beacon_position)
        let y_distance = utility::abs32(sensor_position.y - y)

        if distance > y_distance {
            let beacon_min_x = sensor_position.x - (distance - utility::abs32(sensor_position.y - y))
            let beacon_max_x = sensor_position.x + (distance - utility::abs32(sensor_position.y - y))

            if beacon_min_x < min_x {
                min_x = beacon_min_x
            }
            if beacon_max_x > max_x {
                max_x = beacon_max_x
            }
        }
    }

    println("{}", max_x - min_x + 1 - beacon_x.size() as! i32)
}

fn manhattan(position_a: Position, position_b: Position) -> i32 {
    return utility::abs32(position_a.x - position_b.x) + utility::abs32(position_a.y - position_b.y)
}
