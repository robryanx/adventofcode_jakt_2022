/// Expect:
/// - output: "462\n"

import reader
import utility

struct Position {
    height: usize
    distance: usize?
}

struct Path {
    y: usize
    x: usize
}

function main() {
    mut map: [[Position]] = []

    mut end_x = 0uz
    mut end_y = 0uz

    mut start_x = 0uz
    mut start_y = 0uz

    mut y = 0uz
    for output_line in reader::lines_string(day: 12, examples: false) {
        mut row: [Position] = []

        for x in 0..output_line.length() {
            mut height = 0uz
            if output_line.byte_at(x) == b'E' {
                height = 25

                end_x = x
                end_y = y
            } else if output_line.byte_at(x) == b'S' {
                start_x = x
                start_y = y
            } else {
                height = (output_line.byte_at(x) - b'a') as! usize
            }

            row.push(Position(
                height
                distance: None
            ))
        }

        map.push(row)
        y++
    }

    visit(map: &mut map, y: end_y, x: end_x)

    // mut path: [Path] = []
    // trace_path(map: &map, path: &mut path, y: start_y, x: start_x)
    // path_map(&map, &path)

    println("{}", map[start_y][start_x].distance)

}

function should_visit(position: Position, current_height: usize, new_distance: usize) -> bool {
    if (current_height as! i64 - position.height as! i64) < 2 {
        if (not position.distance.has_value() or new_distance < position.distance!) {
            return true
        }
    }

    return false
}

function visit(map: &mut [[Position]], y: usize, x: usize) {
    if not map[y][x].distance.has_value() {
        map[y][x].distance = 0
    }

    let new_distance = map[y][x].distance! + 1

    let max_y = map.size()
    let max_x = map[0].size()

    if y + 1 < max_y and should_visit(position: map[y+1][x], current_height: map[y][x].height, new_distance) {
        map[y+1][x].distance = new_distance
        visit(map, y: y+1, x)
    }

    if y > 0 and should_visit(position: map[y-1][x], current_height: map[y][x].height, new_distance) {
        map[y-1][x].distance = new_distance
        visit(map, y: y-1, x)
    }

    if x + 1 < max_x and should_visit(position: map[y][x+1], current_height: map[y][x].height, new_distance) {
        map[y][x+1].distance = new_distance
        visit(map, y, x: x+1)
    }

    if x > 0 and should_visit(position: map[y][x-1], current_height: map[y][x].height, new_distance) {
        map[y][x-1].distance = new_distance
        visit(map, y, x: x-1)
    }
}

function distance_map(map: &[[Position]]) {
    let max_y = map.size()
    let max_x = map[0].size()

    for y in 0..max_y {
        for x in 0..max_x {
            print("({}/{}) ", (map[y][x].height as! u8 + b'a') as! c_char, map[y][x].distance)
        }

        print("\n")
    }
}

function path_map(map: &[[Position]], path: &[Path]) throws {
    let max_y = map.size()
    let max_x = map[0].size()

    for y in 0..max_y {
        for x in 0..max_x {
            mut found = false
            for p in *path {
                if y == p.y and x == p.x {
                    found = true
                    break
                }
            }

            mut str = ""
            if map[y][x].distance.has_value() {
                if map[y][x].distance! < 10 {
                    str = format("{}|00{}", (map[y][x].height as! u8 + b'a') as! c_char, map[y][x].distance)
                } else if map[y][x].distance! < 100 {
                    str = format("{}|0{}", (map[y][x].height as! u8 + b'a') as! c_char, map[y][x].distance)
                } else {
                    str = format("{}|{}", (map[y][x].height as! u8 + b'a') as! c_char, map[y][x].distance)
                }
            } else {
                str = format("{}|000", (map[y][x].height as! u8 + b'a') as! c_char)
            }

            if found {
                print("\u001b[33m{}\u001b[0m ", str)
            } else {
                print("{} ", str)
            }
        }

        print("\n")
    }
}

function trace_path(map: &[[Position]], path: &mut [Path], mut y: usize, mut x: usize) throws {
    let max_y = map.size()
    let max_x = map[0].size()

    path.push(Path(y, x))

    mut current_distance = map[y][x].distance!
    if y > 0 and map[y-1][x].distance.has_value() and map[y-1][x].distance! > 0 and map[y-1][x].distance! == current_distance - 1 {
        trace_path(map, path, y: y-1, x)
    } else if y + 1 < max_y and map[y+1][x].distance.has_value() and map[y+1][x].distance! > 0 and map[y+1][x].distance! == current_distance - 1 {
        trace_path(map, path, y: y+1, x)
    } else if x > 0 and map[y][x-1].distance.has_value() and map[y][x-1].distance! > 0 and map[y][x-1].distance! == current_distance - 1 {
        trace_path(map, path, y, x: x-1)
    } else if x + 1 < max_x and map[y][x+1].distance.has_value() and map[y][x+1].distance! > 0 and map[y][x+1].distance! == current_distance - 1 {
        trace_path(map, path, y, x: x+1)
    }
}
